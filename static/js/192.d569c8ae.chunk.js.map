{"version":3,"file":"static/js/192.d569c8ae.chunk.js","mappings":"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","sources":["components/ContactList/ListItem.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.jsx","components/ContactForm/ContactForm.jsx","components/Modal/Modal.jsx","pages/ContactsPage.jsx"],"sourcesContent":["import PropTypes from 'prop-types';\nimport { BiPhoneCall, BiTrash } from 'react-icons/bi';\nimport {\n  ContactItem,\n  ContactWrapper,\n  Name,\n  PhoneWrapper,\n} from 'components/Styles.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  deleteContactsThunk,\n  getContactsThunk,\n} from 'redux/contacts/contactsThunk';\nimport { selectIsLoading } from 'redux/selectors';\nimport Swal from 'sweetalert2';\n\nexport const ListItem = ({ contact }) => {\n  const { id, name, number } = contact;\n\n  const isLoading = useSelector(selectIsLoading);\n\n  const dispatch = useDispatch();\n\n  const handleDelete = async () => {\n    try {\n      const result = await Swal.fire({\n        icon: 'warning',\n        title: 'Are you sure?',\n        text: `You are about to delete ${name}`,\n        showCancelButton: true,\n        confirmButtonText: `Delete ${name}`,\n        confirmButtonColor: 'red',\n      });\n\n      if (result.isConfirmed) {\n        await dispatch(deleteContactsThunk(id));\n        await dispatch(getContactsThunk());\n        Swal.fire({\n          title: `${name} has been deleted!`,\n          icon: 'success',\n          confirmButtonColor: '#4289fe',\n        });\n      }\n    } catch (e) {\n      console.log(e.message);\n    }\n  };\n\n  return (\n    <ContactItem>\n      <Name>{name}</Name>\n      <ContactWrapper>\n        <PhoneWrapper href={`tel:${number}`}>\n          <BiPhoneCall color=\"rgba(66, 137, 254, 255)\" />\n          {number}\n        </PhoneWrapper>\n        <BiTrash\n          type=\"button\"\n          name=\"delete\"\n          value={id}\n          onClick={handleDelete}\n          disabled={isLoading}\n          cursor={'pointer'}\n          color=\"red\"\n        />\n      </ContactWrapper>\n    </ContactItem>\n  );\n};\n\nListItem.propTypes = {\n  contact: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    number: PropTypes.string.isRequired,\n  }).isRequired,\n};\n","import { useDispatch, useSelector } from 'react-redux';\nimport { ListItem } from './ListItem';\nimport { List, Info } from 'components/Styles.styled';\nimport { selectVisibleContacts } from 'redux/selectors';\nimport { useEffect } from 'react';\nimport { getContactsThunk } from 'redux/contacts/contactsThunk';\n\nexport const ContactList = () => {\n  const contacts = useSelector(selectVisibleContacts);\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(getContactsThunk());\n  }, [dispatch]);\n\n  return (\n    <>\n      <List>\n        {contacts.length ? (\n          contacts.map(({ id, name, number }) => (\n            <ListItem key={id} contact={{ id, name, number }} />\n          ))\n        ) : (\n          <>\n            <Info>No contacts</Info>\n          </>\n        )}\n      </List>\n    </>\n  );\n};\n","import { FilterInput } from 'components/Styles.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { setFilter } from 'redux/filter/filterSlice';\nimport { selectFilter } from 'redux/selectors';\n\nexport const Filter = () => {\n  const filter = useSelector(selectFilter);\n  const dispatch = useDispatch();\n\n  const filterHandler = e => {\n    dispatch(setFilter(e.target.value));\n  };\n\n  return (\n    <FilterInput\n      type=\"text\"\n      name=\"filter\"\n      placeholder=\"Search contacts by name\"\n      value={filter}\n      onChange={filterHandler}\n    />\n  );\n};\n","import {\n  Form,\n  FormBtn,\n  FormLabel,\n  Input,\n  SectionTitle,\n} from 'components/Styles.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectContacts, selectContactsError } from 'redux/selectors';\nimport {\n  addContactsThunk,\n  getContactsThunk,\n} from 'redux/contacts/contactsThunk';\nimport Swal from 'sweetalert2';\nimport PropTypes from 'prop-types';\nimport { useState } from 'react';\n\nexport function ContactForm({ onClose }) {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const contacts = useSelector(selectContacts);\n  const error = useSelector(selectContactsError);\n  const dispatch = useDispatch();\n\n  const handleChange = ({ target: { value, name } }) => {\n    name === 'name' ? setName(value) : setNumber(value);\n  };\n\n  const handleSubmit = async e => {\n    e.preventDefault();\n\n    const normalizedName = name.toLowerCase().trim();\n\n    if (\n      contacts.find(\n        contact => contact.name.toLowerCase().trim() === normalizedName\n      )\n    ) {\n      Swal.fire({\n        icon: 'info',\n        title: `${name} is already in contacts`,\n        confirmButtonColor: '#4289fe',\n      });\n      return;\n    } else {\n      const newContact = { name, number };\n      onClose();\n      await dispatch(addContactsThunk(newContact));\n      await dispatch(getContactsThunk());\n      setName('');\n      setNumber('');\n\n      if (error) {\n        Swal.fire({\n          icon: 'error',\n          position: 'top-center',\n          title: 'Error!',\n          text: `${error}`,\n          showConfirmButton: false,\n          timer: 2000,\n        });\n        return;\n      } else {\n        Swal.fire({\n          icon: 'success',\n          position: 'top-center',\n          title: 'Success!',\n          text: `${name} has been successfully added!`,\n          showConfirmButton: false,\n          timer: 2000,\n        });\n      }\n    }\n  };\n\n  return (\n    <>\n      <SectionTitle>Add contact</SectionTitle>\n      <Form onSubmit={handleSubmit} autoComplete=\"off\">\n        <FormLabel>\n          Name\n          <Input\n            type=\"text\"\n            name=\"name\"\n            value={name}\n            onChange={handleChange}\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            required\n          />\n        </FormLabel>\n        <FormLabel>\n          Number\n          <Input\n            type=\"tel\"\n            name=\"number\"\n            value={number}\n            onChange={handleChange}\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            required\n          />\n        </FormLabel>\n        <FormBtn type=\"submit\" disabled={!name || !number}>\n          Add contact\n        </FormBtn>\n      </Form>\n    </>\n  );\n}\n\nContactForm.propTypes = {\n  onClose: PropTypes.func.isRequired,\n};\n","import React, { useEffect } from 'react';\nimport { createPortal } from 'react-dom';\nimport { ModalLayer, Overlay } from '../Styles.styled';\nimport PropTypes from 'prop-types';\nimport { ContactForm } from 'components/ContactForm/ContactForm';\n\nconst modalRoot = document.querySelector('#modal-root');\n\nexport default function Modal({ onClose }) {\n  useEffect(() => {\n    document.addEventListener('keydown', handleEscape);\n    return () => {\n      document.removeEventListener('keydown', handleEscape);\n    };\n  });\n\n  const handleEscape = e => {\n    if (e.code === 'Escape') {\n      onClose();\n    }\n  };\n\n  const handleBackdropClick = e => {\n    if (e.currentTarget === e.target) {\n      onClose();\n    }\n  };\n\n  return createPortal(\n    <Overlay onClick={handleBackdropClick}>\n      <ModalLayer>\n        <ContactForm onClose={onClose} />\n      </ModalLayer>\n    </Overlay>,\n    modalRoot\n  );\n}\n\nModal.propTypes = {\n  onClose: PropTypes.func.isRequired,\n};\n","import { ContactList } from 'components/ContactList/ContactList';\nimport { Filter } from 'components/Filter/Filter';\nimport Modal from 'components/Modal/Modal';\nimport { ContactsSectionWrapper, SectionTitle } from 'components/Styles.styled';\nimport AddCircleIcon from '@mui/icons-material/AddCircle';\nimport { useState } from 'react';\nimport { Tooltip } from '@mui/material';\n\nconst ContactsPage = () => {\n  const [showModal, setShowModal] = useState(false);\n\n  const toggleModal = () => {\n    setShowModal(!showModal);\n  };\n  return (\n    <>\n      <ContactsSectionWrapper>\n        <SectionTitle>Contacts</SectionTitle>\n        <Tooltip title=\"Add contact\">\n          <AddCircleIcon\n            fontSize=\"large\"\n            aria-label=\"Add contact\"\n            onClick={toggleModal}\n            sx={{ fill: 'rgba(66, 137, 254, 255)' }}\n          />\n        </Tooltip>\n      </ContactsSectionWrapper>\n\n      <Filter />\n      <ContactList />\n      {showModal && <Modal onClose={toggleModal}></Modal>}\n    </>\n  );\n};\nexport default ContactsPage;\n"],"names":["ListItem","_ref","contact","id","name","number","isLoading","useSelector","selectIsLoading","dispatch","useDispatch","handleDelete","_ref2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_context","prev","next","Swal","icon","title","text","concat","showCancelButton","confirmButtonText","confirmButtonColor","sent","isConfirmed","deleteContactsThunk","getContactsThunk","t0","console","log","message","stop","apply","arguments","_jsxs","ContactItem","children","_jsx","Name","ContactWrapper","PhoneWrapper","href","BiPhoneCall","color","BiTrash","type","value","onClick","disabled","cursor","ContactList","contacts","selectVisibleContacts","useEffect","_Fragment","List","length","map","Info","Filter","filter","selectFilter","FilterInput","placeholder","onChange","e","setFilter","target","ContactForm","onClose","_useState","useState","_useState2","_slicedToArray","setName","_useState3","_useState4","setNumber","selectContacts","error","selectContactsError","handleChange","_ref2$target","handleSubmit","_ref3","normalizedName","newContact","preventDefault","toLowerCase","trim","find","abrupt","addContactsThunk","position","showConfirmButton","timer","_x","SectionTitle","Form","onSubmit","autoComplete","FormLabel","Input","pattern","required","FormBtn","modalRoot","document","querySelector","Modal","addEventListener","handleEscape","removeEventListener","code","createPortal","Overlay","currentTarget","ModalLayer","showModal","setShowModal","toggleModal","ContactsSectionWrapper","Tooltip","AddCircleIcon","fontSize","sx","fill"],"sourceRoot":""}