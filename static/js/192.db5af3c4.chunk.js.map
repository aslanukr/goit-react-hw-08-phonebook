{"version":3,"file":"static/js/192.db5af3c4.chunk.js","mappings":"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","sources":["components/ContactList/ListItem.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.jsx","components/ContactForm/ContactForm.jsx","components/Modal/Modal.jsx","pages/ContactsPage.jsx"],"sourcesContent":["import PropTypes from 'prop-types';\nimport { BiPhoneCall, BiTrash } from 'react-icons/bi';\nimport {\n  ContactItem,\n  ContactWrapper,\n  Name,\n  PhoneWrapper,\n} from 'components/Styles.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  deleteContactsThunk,\n  getContactsThunk,\n} from 'redux/contacts/contactsThunk';\nimport { selectContactsError, selectIsLoading } from 'redux/selectors';\nimport Swal from 'sweetalert2';\n\nexport const ListItem = ({ contact }) => {\n  const { id, name, number } = contact;\n\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectContactsError);\n\n  const dispatch = useDispatch();\n\n  const handleDelete = async () => {\n    try {\n      const result = await Swal.fire({\n        icon: 'warning',\n        title: 'Are you sure?',\n        text: `You are about to delete ${name}`,\n        showCancelButton: true,\n        confirmButtonText: `Delete ${name}`,\n        confirmButtonColor: 'red',\n      });\n\n      if (result.isConfirmed) {\n        await dispatch(deleteContactsThunk(id));\n        await dispatch(getContactsThunk());\n        if (error) {\n          Swal.fire({\n            title: `Error!`,\n            text: `${error}`,\n            icon: 'error',\n            confirmButtonColor: '#4289fe',\n          });\n          return;\n        } else {\n          Swal.fire({\n            title: `${name} has been deleted!`,\n            icon: 'success',\n            confirmButtonColor: '#4289fe',\n          });\n        }\n      }\n    } catch (e) {\n      console.log(e.message);\n    }\n  };\n\n  return (\n    <ContactItem>\n      <Name>{name}</Name>\n      <ContactWrapper>\n        <PhoneWrapper href={`tel:${number}`}>\n          <BiPhoneCall color=\"rgba(66, 137, 254, 255)\" />\n          {number}\n        </PhoneWrapper>\n        <BiTrash\n          type=\"button\"\n          name=\"delete\"\n          value={id}\n          onClick={handleDelete}\n          disabled={isLoading}\n          cursor={'pointer'}\n          color=\"red\"\n        />\n      </ContactWrapper>\n    </ContactItem>\n  );\n};\n\nListItem.propTypes = {\n  contact: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    number: PropTypes.string.isRequired,\n  }).isRequired,\n};\n","import { useDispatch, useSelector } from 'react-redux';\nimport { ListItem } from './ListItem';\nimport { List, Info } from 'components/Styles.styled';\nimport { selectVisibleContacts } from 'redux/selectors';\nimport { useEffect } from 'react';\nimport { getContactsThunk } from 'redux/contacts/contactsThunk';\n\nexport const ContactList = () => {\n  const contacts = useSelector(selectVisibleContacts);\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(getContactsThunk());\n  }, [dispatch]);\n\n  return (\n    <>\n      <List>\n        {contacts.length ? (\n          contacts.map(({ id, name, number }) => (\n            <ListItem key={id} contact={{ id, name, number }} />\n          ))\n        ) : (\n          <>\n            <Info>No contacts</Info>\n          </>\n        )}\n      </List>\n    </>\n  );\n};\n","import { FilterInput } from 'components/Styles.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { setFilter } from 'redux/filter/filterSlice';\nimport { selectFilter } from 'redux/selectors';\n\nexport const Filter = () => {\n  const filter = useSelector(selectFilter);\n  const dispatch = useDispatch();\n\n  const filterHandler = e => {\n    dispatch(setFilter(e.target.value));\n  };\n\n  return (\n    <FilterInput\n      type=\"text\"\n      name=\"filter\"\n      placeholder=\"Search contacts by name\"\n      value={filter}\n      onChange={filterHandler}\n    />\n  );\n};\n","import {\n  Form,\n  FormBtn,\n  FormLabel,\n  Input,\n  SectionTitle,\n} from 'components/Styles.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectContacts, selectContactsError } from 'redux/selectors';\nimport {\n  addContactsThunk,\n  getContactsThunk,\n} from 'redux/contacts/contactsThunk';\nimport Swal from 'sweetalert2';\nimport PropTypes from 'prop-types';\nimport { useState } from 'react';\n\nexport function ContactForm({ onClose }) {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const contacts = useSelector(selectContacts);\n  const error = useSelector(selectContactsError);\n  const dispatch = useDispatch();\n\n  const handleChange = ({ target: { value, name } }) => {\n    name === 'name' ? setName(value) : setNumber(value);\n  };\n\n  const handleSubmit = async e => {\n    e.preventDefault();\n\n    const normalizedName = name.toLowerCase().trim();\n\n    if (\n      contacts.find(\n        contact => contact.name.toLowerCase().trim() === normalizedName\n      )\n    ) {\n      Swal.fire({\n        icon: 'info',\n        title: `${name} is already in contacts`,\n        confirmButtonColor: '#4289fe',\n      });\n      return;\n    } else {\n      const newContact = { name, number };\n      onClose();\n      await dispatch(addContactsThunk(newContact));\n      await dispatch(getContactsThunk());\n      setName('');\n      setNumber('');\n\n      if (error) {\n        Swal.fire({\n          icon: 'error',\n          position: 'top-center',\n          title: 'Error!',\n          text: `${error}`,\n          showConfirmButton: false,\n          timer: 2000,\n        });\n        return;\n      } else {\n        Swal.fire({\n          icon: 'success',\n          position: 'top-center',\n          title: 'Success!',\n          text: `${name} has been successfully added!`,\n          showConfirmButton: false,\n          timer: 2000,\n        });\n      }\n    }\n  };\n\n  return (\n    <>\n      <SectionTitle>Add contact</SectionTitle>\n      <Form onSubmit={handleSubmit} autoComplete=\"off\">\n        <FormLabel>\n          Name\n          <Input\n            type=\"text\"\n            name=\"name\"\n            value={name}\n            onChange={handleChange}\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            required\n          />\n        </FormLabel>\n        <FormLabel>\n          Number\n          <Input\n            type=\"tel\"\n            name=\"number\"\n            value={number}\n            onChange={handleChange}\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            required\n          />\n        </FormLabel>\n        <FormBtn type=\"submit\" disabled={!name || !number}>\n          Add contact\n        </FormBtn>\n      </Form>\n    </>\n  );\n}\n\nContactForm.propTypes = {\n  onClose: PropTypes.func.isRequired,\n};\n","import React, { useEffect } from 'react';\nimport { createPortal } from 'react-dom';\nimport { Close, ModalLayer, Overlay } from '../Styles.styled';\nimport PropTypes from 'prop-types';\nimport { ContactForm } from 'components/ContactForm/ContactForm';\n\nconst modalRoot = document.querySelector('#modal-root');\n\nexport default function Modal({ onClose }) {\n  useEffect(() => {\n    document.addEventListener('keydown', handleEscape);\n    return () => {\n      document.removeEventListener('keydown', handleEscape);\n    };\n  });\n\n  const handleEscape = e => {\n    if (e.code === 'Escape') {\n      onClose();\n    }\n  };\n\n  const handleBackdropClick = e => {\n    if (e.currentTarget === e.target) {\n      onClose();\n    }\n  };\n\n  return createPortal(\n    <Overlay onClick={handleBackdropClick}>\n      <ModalLayer>\n        <Close onClick={() => onClose()} />\n        <ContactForm onClose={onClose} />\n      </ModalLayer>\n    </Overlay>,\n    modalRoot\n  );\n}\n\nModal.propTypes = {\n  onClose: PropTypes.func.isRequired,\n};\n","import { ContactList } from 'components/ContactList/ContactList';\nimport { Filter } from 'components/Filter/Filter';\nimport Modal from 'components/Modal/Modal';\nimport { ContactsSectionWrapper, SectionTitle } from 'components/Styles.styled';\nimport AddCircleIcon from '@mui/icons-material/AddCircle';\nimport { useState } from 'react';\nimport { Tooltip } from '@mui/material';\n\nconst ContactsPage = () => {\n  const [showModal, setShowModal] = useState(false);\n\n  const toggleModal = () => {\n    setShowModal(!showModal);\n  };\n  return (\n    <>\n      <ContactsSectionWrapper>\n        <SectionTitle>Contacts</SectionTitle>\n        <Tooltip title=\"Add contact\">\n          <AddCircleIcon\n            fontSize=\"large\"\n            aria-label=\"Add contact\"\n            onClick={toggleModal}\n            sx={{ fill: 'rgba(66, 137, 254, 255)' }}\n          />\n        </Tooltip>\n      </ContactsSectionWrapper>\n\n      <Filter />\n      <ContactList />\n      {showModal && <Modal onClose={toggleModal}></Modal>}\n    </>\n  );\n};\nexport default ContactsPage;\n"],"names":["ListItem","_ref","contact","id","name","number","isLoading","useSelector","selectIsLoading","error","selectContactsError","dispatch","useDispatch","handleDelete","_ref2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_context","prev","next","Swal","icon","title","text","concat","showCancelButton","confirmButtonText","confirmButtonColor","sent","isConfirmed","deleteContactsThunk","getContactsThunk","abrupt","t0","console","log","message","stop","apply","arguments","_jsxs","ContactItem","children","_jsx","Name","ContactWrapper","PhoneWrapper","href","BiPhoneCall","color","BiTrash","type","value","onClick","disabled","cursor","ContactList","contacts","selectVisibleContacts","useEffect","_Fragment","List","length","map","Info","Filter","filter","selectFilter","FilterInput","placeholder","onChange","e","setFilter","target","ContactForm","onClose","_useState","useState","_useState2","_slicedToArray","setName","_useState3","_useState4","setNumber","selectContacts","handleChange","_ref2$target","handleSubmit","_ref3","normalizedName","newContact","preventDefault","toLowerCase","trim","find","addContactsThunk","position","showConfirmButton","timer","_x","SectionTitle","Form","onSubmit","autoComplete","FormLabel","Input","pattern","required","FormBtn","modalRoot","document","querySelector","Modal","addEventListener","handleEscape","removeEventListener","code","createPortal","Overlay","currentTarget","ModalLayer","Close","showModal","setShowModal","toggleModal","ContactsSectionWrapper","Tooltip","AddCircleIcon","fontSize","sx","fill"],"sourceRoot":""}