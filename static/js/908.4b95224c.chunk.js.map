{"version":3,"file":"static/js/908.4b95224c.chunk.js","mappings":"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","sources":["redux/selectors.js","components/ContactList/ListItem.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.jsx","pages/ContactsPage.jsx"],"sourcesContent":["import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectContacts = state => state.contacts.items;\nexport const selectFilter = state => state.filter;\nexport const selectIsLoading = state => state.contacts.isLoading;\n\nexport const selectVisibleContacts = createSelector(\n  [selectContacts, selectFilter],\n  (contacts, filter) => {\n    const normalizedFilter = filter.toLowerCase().trim();\n    const sortedContacts = contacts.toSorted((a, b) =>\n      a.name.localeCompare(b.name)\n    );\n    return sortedContacts.filter(sortedContact =>\n      sortedContact.name.toLowerCase().includes(normalizedFilter)\n    );\n  }\n);\n","import PropTypes from 'prop-types';\nimport { BiPhoneCall, BiTrash } from 'react-icons/bi';\nimport {\n  ContactItem,\n  ContactWrapper,\n  Name,\n  PhoneWrapper,\n} from 'components/Styles.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  deleteContactsThunk,\n  getContactsThunk,\n} from 'redux/contacts/contactsThunk';\nimport { selectIsLoading } from 'redux/selectors';\nimport Swal from 'sweetalert2';\n\nexport const ListItem = ({ contact }) => {\n  const { id, name, number } = contact;\n\n  const isLoading = useSelector(selectIsLoading);\n\n  const dispatch = useDispatch();\n\n  const handleDelete = async () => {\n    try {\n      const result = await Swal.fire({\n        icon: 'warning',\n        title: 'Are you sure?',\n        text: `You are about to delete ${name}`,\n        showCancelButton: true,\n        confirmButtonText: `Delete ${name}`,\n        confirmButtonColor: 'red',\n      });\n\n      if (result.isConfirmed) {\n        await dispatch(deleteContactsThunk(id));\n        await dispatch(getContactsThunk());\n        Swal.fire({\n          title: `${name} has been deleted!`,\n          icon: 'success',\n          confirmButtonColor: '#4289fe',\n        });\n      }\n    } catch (e) {\n      console.log(e.message);\n    }\n  };\n\n  return (\n    <ContactItem>\n      <Name>{name}</Name>\n      <ContactWrapper>\n        <PhoneWrapper href={`tel:${number}`}>\n          <BiPhoneCall color=\"rgba(66, 137, 254, 255)\" />\n          {number}\n        </PhoneWrapper>\n        <BiTrash\n          type=\"button\"\n          name=\"delete\"\n          value={id}\n          onClick={handleDelete}\n          disabled={isLoading}\n          cursor={'pointer'}\n          color=\"red\"\n        />\n      </ContactWrapper>\n    </ContactItem>\n  );\n};\n\nListItem.propTypes = {\n  contact: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    number: PropTypes.string.isRequired,\n  }).isRequired,\n};\n","import { useDispatch, useSelector } from 'react-redux';\nimport { ListItem } from './ListItem';\nimport { List, Info } from 'components/Styles.styled';\nimport { selectVisibleContacts } from 'redux/selectors';\nimport { useEffect } from 'react';\nimport { getContactsThunk } from 'redux/contacts/contactsThunk';\n\nexport const ContactList = () => {\n  const contacts = useSelector(selectVisibleContacts);\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(getContactsThunk());\n  }, [dispatch]);\n\n  return (\n    <>\n      <List>\n        {contacts.length ? (\n          contacts.map(({ id, name, number }) => (\n            <ListItem key={id} contact={{ id, name, number }} />\n          ))\n        ) : (\n          <>\n            <Info>No contacts</Info>\n          </>\n        )}\n      </List>\n    </>\n  );\n};\n","import { FilterInput } from 'components/Styles.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { setFilter } from 'redux/filter/filterSlice';\nimport { selectFilter } from 'redux/selectors';\n\nexport const Filter = () => {\n  const filter = useSelector(selectFilter);\n  const dispatch = useDispatch();\n\n  const filterHandler = e => {\n    dispatch(setFilter(e.target.value));\n  };\n\n  return (\n    <FilterInput\n      type=\"text\"\n      name=\"filter\"\n      placeholder=\"Search contacts by name\"\n      value={filter}\n      onChange={filterHandler}\n    />\n  );\n};\n","import { ContactList } from 'components/ContactList/ContactList';\nimport { Filter } from 'components/Filter/Filter';\nimport { SectionTitle } from 'components/Styles.styled';\n\nconst ContactsPage = () => {\n  return (\n    <>\n      <SectionTitle>Contacts</SectionTitle>\n      <Filter />\n      <ContactList />\n    </>\n  );\n};\nexport default ContactsPage;\n"],"names":["selectFilter","state","filter","selectIsLoading","contacts","isLoading","selectVisibleContacts","createSelector","items","normalizedFilter","toLowerCase","trim","toSorted","a","b","name","localeCompare","sortedContact","includes","ListItem","_ref","contact","id","number","useSelector","dispatch","useDispatch","handleDelete","_ref2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_context","prev","next","Swal","icon","title","text","concat","showCancelButton","confirmButtonText","confirmButtonColor","sent","isConfirmed","deleteContactsThunk","getContactsThunk","t0","console","log","message","stop","apply","arguments","_jsxs","ContactItem","children","_jsx","Name","ContactWrapper","PhoneWrapper","href","BiPhoneCall","color","BiTrash","type","value","onClick","disabled","cursor","ContactList","useEffect","_Fragment","List","length","map","Info","Filter","FilterInput","placeholder","onChange","e","setFilter","target","SectionTitle"],"sourceRoot":""}