{"version":3,"file":"static/js/566.5c48029a.chunk.js","mappings":"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","sources":["components/EditForm/EditForm.jsx","components/Modal/ModalEdit.jsx","components/ContactList/ListItem.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.jsx","components/ContactForm/ContactForm.jsx","components/Modal/ModalAdd.jsx","pages/ContactsPage.jsx"],"sourcesContent":["import { Form, FormLabel, Input, SectionTitle } from 'components/Styles.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectContacts, selectContactsError } from 'redux/selectors';\nimport {\n  editContactsThunk,\n  getContactsThunk,\n} from 'redux/contacts/contactsThunk';\nimport Swal from 'sweetalert2';\nimport PropTypes from 'prop-types';\nimport { useState } from 'react';\nimport { Button } from '@mui/material';\n\nexport function EditForm({ onClose, contact }) {\n  const { id, name } = contact;\n  const [updatedName, setUpdatedName] = useState('');\n  const [updatedNumber, setUpdatedNumber] = useState('');\n\n  const contacts = useSelector(selectContacts);\n  const error = useSelector(selectContactsError);\n  const dispatch = useDispatch();\n\n  const handleChange = ({ target: { value, name } }) => {\n    name === 'name' ? setUpdatedName(value) : setUpdatedNumber(value);\n  };\n\n  const handleSubmit = async e => {\n    e.preventDefault();\n\n    const normalizedName = updatedName.toLowerCase().trim();\n\n    if (\n      contacts.find(\n        contact =>\n          contact.name.toLowerCase().trim() === normalizedName &&\n          contact.id !== id\n      )\n    ) {\n      Swal.fire({\n        icon: 'info',\n        title: `${updatedName} is already in contacts`,\n        confirmButtonColor: '#4289fe',\n      });\n      return;\n    } else {\n      const updatedContact = { name: updatedName, number: updatedNumber };\n      onClose();\n      await dispatch(editContactsThunk({ id, updatedContact }));\n      await dispatch(getContactsThunk());\n      setUpdatedName('');\n      setUpdatedNumber('');\n\n      if (error) {\n        Swal.fire({\n          icon: 'error',\n          position: 'top-center',\n          title: 'Error!',\n          text: `${error}`,\n          showConfirmButton: false,\n          timer: 2000,\n        });\n        return;\n      } else {\n        Swal.fire({\n          icon: 'success',\n          position: 'top-center',\n          title: 'Success!',\n          text: `Contact has been successfully edited!`,\n          showConfirmButton: false,\n          timer: 2000,\n        });\n      }\n    }\n  };\n\n  return (\n    <>\n      <SectionTitle>Edit \"{name}\"</SectionTitle>\n      <Form onSubmit={handleSubmit} autoComplete=\"off\">\n        <FormLabel>\n          Name\n          <Input\n            type=\"text\"\n            name=\"name\"\n            value={updatedName}\n            onChange={handleChange}\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            required\n          />\n        </FormLabel>\n        <FormLabel>\n          Number\n          <Input\n            type=\"tel\"\n            name=\"number\"\n            value={updatedNumber}\n            onChange={handleChange}\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            required\n          />\n        </FormLabel>\n        <Button\n          type=\"submit\"\n          disabled={!updatedName || !updatedNumber}\n          variant=\"contained\"\n        >\n          Submit\n        </Button>\n      </Form>\n    </>\n  );\n}\n\nEditForm.propTypes = {\n  onClose: PropTypes.func.isRequired,\n  contact: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n  }).isRequired,\n};\n","import React, { useEffect } from 'react';\nimport { createPortal } from 'react-dom';\nimport { Close, ModalLayer, Overlay } from '../Styles.styled';\nimport PropTypes from 'prop-types';\nimport { EditForm } from 'components/EditForm/EditForm';\n\nconst modalRoot = document.querySelector('#modal-root');\n\nexport default function ModalEdit({ onClose, contact }) {\n  useEffect(() => {\n    document.addEventListener('keydown', handleEscape);\n    return () => {\n      document.removeEventListener('keydown', handleEscape);\n    };\n  });\n\n  const handleEscape = e => {\n    if (e.code === 'Escape') {\n      onClose();\n    }\n  };\n\n  const handleBackdropClick = e => {\n    if (e.currentTarget === e.target) {\n      onClose();\n    }\n  };\n\n  return createPortal(\n    <Overlay onClick={handleBackdropClick}>\n      <ModalLayer>\n        <Close onClick={() => onClose()} />\n        <EditForm onClose={onClose} contact={contact} />\n      </ModalLayer>\n    </Overlay>,\n    modalRoot\n  );\n}\n\nModalEdit.propTypes = {\n  onClose: PropTypes.func.isRequired,\n  contact: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n  }).isRequired,\n};\n","import PropTypes from 'prop-types';\nimport { BiPhoneCall, BiTrash } from 'react-icons/bi';\nimport EditIcon from '@mui/icons-material/Edit';\nimport {\n  ContactItem,\n  ContactWrapper,\n  Name,\n  PhoneWrapper,\n} from 'components/Styles.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  deleteContactsThunk,\n  getContactsThunk,\n} from 'redux/contacts/contactsThunk';\nimport { selectContactsError, selectIsLoading } from 'redux/selectors';\nimport Swal from 'sweetalert2';\nimport { useState } from 'react';\nimport ModalEdit from 'components/Modal/ModalEdit';\n\nexport const ListItem = ({ contact }) => {\n  const { id, name, number } = contact;\n\n  const [showModal, setShowModal] = useState(false);\n\n  const toggleModal = () => {\n    setShowModal(!showModal);\n  };\n\n  const handleEdit = () => {\n    toggleModal(contact.id);\n  };\n\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectContactsError);\n\n  const dispatch = useDispatch();\n\n  const handleDelete = async () => {\n    try {\n      const result = await Swal.fire({\n        icon: 'warning',\n        title: 'Are you sure?',\n        text: `You are about to delete ${name}`,\n        showCancelButton: true,\n        confirmButtonText: `Delete ${name}`,\n        confirmButtonColor: 'red',\n      });\n\n      if (result.isConfirmed) {\n        await dispatch(deleteContactsThunk(id));\n        await dispatch(getContactsThunk());\n        if (error) {\n          Swal.fire({\n            title: `Error!`,\n            text: `${error}`,\n            icon: 'error',\n            confirmButtonColor: '#4289fe',\n          });\n          return;\n        } else {\n          Swal.fire({\n            title: `${name} has been deleted!`,\n            icon: 'success',\n            confirmButtonColor: '#4289fe',\n          });\n        }\n      }\n    } catch (e) {\n      console.log(e.message);\n    }\n  };\n\n  return (\n    <>\n      <ContactItem>\n        <ContactWrapper>\n          <EditIcon\n            sx={{ fill: 'orange' }}\n            type=\"button\"\n            cursor={'pointer'}\n            onClick={handleEdit}\n          />\n          <Name>{name}</Name>\n        </ContactWrapper>\n        <ContactWrapper>\n          <PhoneWrapper href={`tel:${number}`}>\n            <BiPhoneCall color=\"rgba(66, 137, 254, 255)\" />\n            {number}\n          </PhoneWrapper>\n          <BiTrash\n            type=\"button\"\n            name=\"delete\"\n            value={id}\n            onClick={handleDelete}\n            disabled={isLoading}\n            cursor={'pointer'}\n            color=\"red\"\n          />\n        </ContactWrapper>\n      </ContactItem>\n      {showModal && (\n        <ModalEdit onClose={toggleModal} contact={contact}></ModalEdit>\n      )}\n    </>\n  );\n};\n\nListItem.propTypes = {\n  contact: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    number: PropTypes.string.isRequired,\n  }).isRequired,\n};\n","import { useDispatch, useSelector } from 'react-redux';\nimport { ListItem } from './ListItem';\nimport { List, Info } from 'components/Styles.styled';\nimport { selectVisibleContacts } from 'redux/selectors';\nimport { useEffect } from 'react';\nimport { getContactsThunk } from 'redux/contacts/contactsThunk';\n\nexport const ContactList = () => {\n  const contacts = useSelector(selectVisibleContacts);\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(getContactsThunk());\n  }, [dispatch]);\n\n  return (\n    <>\n      <List>\n        {contacts.length ? (\n          contacts.map(({ id, name, number }) => (\n            <ListItem key={id} contact={{ id, name, number }} />\n          ))\n        ) : (\n          <>\n            <Info>No contacts</Info>\n          </>\n        )}\n      </List>\n    </>\n  );\n};\n","import { FilterInput } from 'components/Styles.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { setFilter } from 'redux/filter/filterSlice';\nimport { selectFilter } from 'redux/selectors';\n\nexport const Filter = () => {\n  const filter = useSelector(selectFilter);\n  const dispatch = useDispatch();\n\n  const filterHandler = e => {\n    dispatch(setFilter(e.target.value));\n  };\n\n  return (\n    <FilterInput\n      type=\"text\"\n      name=\"filter\"\n      placeholder=\"Search contacts by name\"\n      value={filter}\n      onChange={filterHandler}\n    />\n  );\n};\n","import { Form, FormLabel, Input, SectionTitle } from 'components/Styles.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectContacts, selectContactsError } from 'redux/selectors';\nimport {\n  addContactsThunk,\n  getContactsThunk,\n} from 'redux/contacts/contactsThunk';\nimport Swal from 'sweetalert2';\nimport PropTypes from 'prop-types';\nimport { useState } from 'react';\nimport { Button } from '@mui/material';\n\nexport function ContactForm({ onClose }) {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const contacts = useSelector(selectContacts);\n  const error = useSelector(selectContactsError);\n  const dispatch = useDispatch();\n\n  const handleChange = ({ target: { value, name } }) => {\n    name === 'name' ? setName(value) : setNumber(value);\n  };\n\n  const handleSubmit = async e => {\n    e.preventDefault();\n\n    const normalizedName = name.toLowerCase().trim();\n\n    if (\n      contacts.find(\n        contact => contact.name.toLowerCase().trim() === normalizedName\n      )\n    ) {\n      Swal.fire({\n        icon: 'info',\n        title: `${name} is already in contacts`,\n        confirmButtonColor: '#4289fe',\n      });\n      return;\n    } else {\n      const newContact = { name, number };\n      onClose();\n      await dispatch(addContactsThunk(newContact));\n      await dispatch(getContactsThunk());\n      setName('');\n      setNumber('');\n\n      if (error) {\n        Swal.fire({\n          icon: 'error',\n          position: 'top-center',\n          title: 'Error!',\n          text: `${error}`,\n          showConfirmButton: false,\n          timer: 2000,\n        });\n        return;\n      } else {\n        Swal.fire({\n          icon: 'success',\n          position: 'top-center',\n          title: 'Success!',\n          text: `${name} has been successfully added!`,\n          showConfirmButton: false,\n          timer: 2000,\n        });\n      }\n    }\n  };\n\n  return (\n    <>\n      <SectionTitle>Add contact</SectionTitle>\n      <Form onSubmit={handleSubmit} autoComplete=\"off\">\n        <FormLabel>\n          Name\n          <Input\n            type=\"text\"\n            name=\"name\"\n            value={name}\n            onChange={handleChange}\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            required\n          />\n        </FormLabel>\n        <FormLabel>\n          Number\n          <Input\n            type=\"tel\"\n            name=\"number\"\n            value={number}\n            onChange={handleChange}\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            required\n          />\n        </FormLabel>\n        <Button type=\"submit\" disabled={!name || !number} variant=\"contained\">\n          Add contact\n        </Button>\n      </Form>\n    </>\n  );\n}\n\nContactForm.propTypes = {\n  onClose: PropTypes.func.isRequired,\n};\n","import React, { useEffect } from 'react';\nimport { createPortal } from 'react-dom';\nimport { Close, ModalLayer, Overlay } from '../Styles.styled';\nimport PropTypes from 'prop-types';\nimport { ContactForm } from 'components/ContactForm/ContactForm';\n\nconst modalRoot = document.querySelector('#modal-root');\n\nexport default function ModalAdd({ onClose }) {\n  useEffect(() => {\n    document.addEventListener('keydown', handleEscape);\n    return () => {\n      document.removeEventListener('keydown', handleEscape);\n    };\n  });\n\n  const handleEscape = e => {\n    if (e.code === 'Escape') {\n      onClose();\n    }\n  };\n\n  const handleBackdropClick = e => {\n    if (e.currentTarget === e.target) {\n      onClose();\n    }\n  };\n\n  return createPortal(\n    <Overlay onClick={handleBackdropClick}>\n      <ModalLayer>\n        <Close onClick={() => onClose()} />\n        <ContactForm onClose={onClose} />\n      </ModalLayer>\n    </Overlay>,\n    modalRoot\n  );\n}\n\nModalAdd.propTypes = {\n  onClose: PropTypes.func.isRequired,\n};\n","import { ContactList } from 'components/ContactList/ContactList';\nimport { Filter } from 'components/Filter/Filter';\nimport { ContactsSectionWrapper, SectionTitle } from 'components/Styles.styled';\nimport AddCircleIcon from '@mui/icons-material/AddCircle';\nimport { useState } from 'react';\nimport { Tooltip } from '@mui/material';\nimport { Helmet } from 'react-helmet';\nimport ModalAdd from 'components/Modal/ModalAdd';\n\nconst ContactsPage = () => {\n  const [showModal, setShowModal] = useState(false);\n\n  const toggleModal = () => {\n    setShowModal(!showModal);\n  };\n  return (\n    <>\n      <Helmet>\n        <title>Contacts=Phonebook=</title>\n      </Helmet>\n      <ContactsSectionWrapper>\n        <SectionTitle>Contacts</SectionTitle>\n        <Tooltip title=\"Add contact\">\n          <AddCircleIcon\n            fontSize=\"large\"\n            aria-label=\"Add contact\"\n            onClick={toggleModal}\n            sx={{ fill: 'rgba(66, 137, 254, 255)' }}\n          />\n        </Tooltip>\n      </ContactsSectionWrapper>\n\n      <Filter />\n      <ContactList />\n      {showModal && <ModalAdd onClose={toggleModal}></ModalAdd>}\n    </>\n  );\n};\nexport default ContactsPage;\n"],"names":["EditForm","_ref","onClose","contact","id","name","_useState","useState","_useState2","_slicedToArray","updatedName","setUpdatedName","_useState3","_useState4","updatedNumber","setUpdatedNumber","contacts","useSelector","selectContacts","error","selectContactsError","dispatch","useDispatch","handleChange","_ref2","_ref2$target","target","value","handleSubmit","_ref3","_asyncToGenerator","_regeneratorRuntime","mark","_callee","e","normalizedName","updatedContact","wrap","_context","prev","next","preventDefault","toLowerCase","trim","find","Swal","icon","title","concat","confirmButtonColor","abrupt","number","editContactsThunk","getContactsThunk","position","text","showConfirmButton","timer","stop","_x","apply","arguments","_jsxs","_Fragment","children","SectionTitle","Form","onSubmit","autoComplete","FormLabel","_jsx","Input","type","onChange","pattern","required","Button","disabled","variant","modalRoot","document","querySelector","ModalEdit","useEffect","addEventListener","handleEscape","removeEventListener","code","createPortal","Overlay","onClick","currentTarget","ModalLayer","Close","ListItem","showModal","setShowModal","toggleModal","isLoading","selectIsLoading","handleDelete","showCancelButton","confirmButtonText","sent","isConfirmed","deleteContactsThunk","t0","console","log","message","ContactItem","ContactWrapper","EditIcon","sx","fill","cursor","Name","PhoneWrapper","href","BiPhoneCall","color","BiTrash","ContactList","selectVisibleContacts","List","length","map","Info","Filter","filter","selectFilter","FilterInput","placeholder","setFilter","ContactForm","setName","setNumber","newContact","addContactsThunk","ModalAdd","Helmet","ContactsSectionWrapper","Tooltip","AddCircleIcon","fontSize"],"sourceRoot":""}